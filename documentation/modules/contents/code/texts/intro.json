{
  "es": {
    "intro": {
      "universal": {
        "title": "¿Qué es <span className=\"beyond\">BeyondJS</span>?",
        "p1": "BeyondJS es un meta-framework basado en typescript, diseñado para crear proyectos que funcionen en diferentes entornos de ejecución JavaScript, manteniendo el foco en garantizar al programador una experiencia universal de desarrollo. Lo hace manteniéndose agnóstico a las librerías y tecnologías existentes, buscando dejar un camino estandarizado que permita su integración.",
        "p2": "Los factores que garantizan una experiencia de desarrollo homogénea, sin importar el entorno para el que se trabaje son:",
        "items": [
          "<strong>HMR en código cliente y código Node</strong>: de forma automática, sin configuraciones adicionales. Además, brinda una API al desarrollador que permite definir cuando y que desea actualizar.",
          "<strong>Desarrollo modular</strong>: BeyondJS tiene una filosofía de generación de bundles pequeños que son cargados a demanda en el momento en que son requeridos. No trabaja con un árbol de dependencias y por tanto no requiere de empaquetadores cómo webpack o parcel.",
          "<strong>Gestión de distribuciones</strong>: BeyondJS permite definir distribuciones para las plataformas de desarrollo que desean utilizarse y gestiona la, disponibilización del código final en base a ello."
        ]
      },
      "overview": {
        "title": "Manejo de proyectos",
        "p1": "Los proyectos en BeyondJS, tienen un enfoque de compatibilidad con NPM, lo cual les permite ser pensados como paquetes que podrían eventualmente, ser publicados directamente en NPM y posteriormente utilizados en cualquier otro proyecto, tanto de BeyondJS como externo.",
        "p2": "Un proyecto es definido por medio de la especificación de su scope, nombre y de al menos una distribución. Las distribuciones permiten identificar el entorno de ejecución sobre el cual se espera funcione el proyecto y algunos datos adicionales que pueden resultar relevantes para el proceso de compilación y deployment. Asimismo, se puede configurar múltiples distribuciones en simultáneo, brindándole al desarrollador la flexibilidad de validar el comportamiento de su proyecto en los diferentes ecosistemas configurados.",
        "p3": {
          "t1": "Los proyectos contienen ",
          "link1": "módulos",
          "t2": " estos representan la unidad mínima de desarrollo en BeyondJS y tienen la capacidad de definir sobre que plataforma funcionan. Dato que es interpretado por las",
          "link2": "distribuciones",
          "t3": " configuradas en el entorno de desarrollo y al momento de realizar deploy de un proyecto.",
          "p4": {
            "t1": "Si quieres conocer más en detalle acerca de esto y sobre cómo crear proyectos en BeyondJSte recomendamos ir a la ",
            "l1": "sección de Proyectos"
          }
        },
        "p4": {
          "t1": "Si quieres conocer más en detalle acerca de esto y sobre cómo crear proyectos en BeyondJSte recomendamos ir a la ",
          "l1": "sección de Proyectos"
        }
      },
      "features": {
        "title": "Features",
        "p1": "A continuación, listamos algunas de las características más relevantes de BeyondJS.",
        "items": [
          "<strong>Universal deployment</strong>: Un mismo código, cualquier entorno.",
          "<strong>Carga modular y a demanda</strong>: Esto quiere decir que el código sólo carga una vez, cuando es requerido.",
          "<strong>Dashboard</strong>  o panel de control muy poderoso para desarrolladores.",
          "<strong>Plug & play</strong> de módulos.",
          "<strong>Ecosistema</strong> único de desarrollo entre Backend y Frontend. ",
          "<strong>Real Time</strong>  listo para implementar con web sockets.",
          "<strong>Integración automática</strong> con frameworks de vistas como React, Vue, Svelte.",
          "<strong>Typescript más inteligente</strong>: transpilado y chequeo de tipos en paralelo, para mejor productividad y rendimiento.",
          "<strong>HMR</strong>  modular y en el código backend de forma automática.",
          "<strong>Sin árbol de dependencias</strong> BeyondJS trabaja bajo un paradigma distinto al que usan empaquetadores como webpack.",
          "<strong>Jamstack + SSR.</strong>",
          "Entorno de ejecución de servicios gestionados por BeyondJS.",
          "Web Components integrados.",
          "<strong>Multilenguaje</strong> manejado por medio de bundles.",
          "Manejo de plantillas y sobreescritura."
        ]
      }
    }
  },
  "en": {
    "intro": {
      "universal": {
        "title": "What is BeyondJS?",
        "p1": "BeyondJS is a typescript-based meta framework, designed to create projects that work in different JavaScript execution environments, keeping the focus on ensuring a universal development experience for the developer. It does so by remaining agnostic to existing libraries and technologies, seeking to leave a standardized path that allows their integration.",
        "p2": "The factors that ensure a homogeneous development experience, regardless of the environment in which you are working, are:",
        "items": [
          "HMR in client code and Node code: automatically, without additional configurations. In addition, it provides an API to the developer that allows you to define when and what you want to update.",
          "Modular development: BeyondJS has a philosophy of generating small bundles that are loaded on-demand, at the exact required moment. It doesn't work with a dependency tree and therefore doesn't require bundle modules like webpack or parcel.",
          "Distribution management: BeyondJS allows you to define distributions for the development platforms you want to use and manages the availability of the final code based on it."
        ]
      },
      "overview": {
        "title": "Project management",
        "p1": "Projects in BeyondJS have a compatibility approach with NPM, which allows them to be considered as packages that could eventually be published directly in NPM and later on used in any other project, both BeyondJS and external.",
        "p2": "A project is defined by specifying its scope, name, and at least one distribution. The distributions allow identifying the execution environment in which the project is expected to work and some additional data that may be relevant for the compilation and deployment process. Likewise, multiple distributions are able to be  configured simultaneously, giving the developer the flexibility to validate the behavior of their project in different configured ecosystems.",
        "p3": {
          "t1": "The projects contain ",
          "link1": "modules",
          "t2": ". These represent the minimum unit of development in BeyondJS and have the ability to define on which platform they work. Data interpreted by the",
          "link2": "distributions",
          "t3": "  distributions configured in the development environment and when deploying a project."
        },
        "p4": {
          "t1": "If you want to know more about projects and how create it, you can go to the",
          "l1": "Project chapter"
        }
      },
      "features": {
        "title": "Features",
        "p1": "Below, we list some of the most relevant features of BeyondJS.",
        "items": [
          "<strong>Universal deployment</strong>: Same code, any environment.",
          "<strong> Modular and on-demand charging</strong>: The code only loads once when required.",
          "<strong>Dashboard</strong> or a powerful control panel for developers.\n",
          "Module <strong>Plug & play</strong>.",
          "<strong>Unique development ecosystem</strong> between <strong>Backend and Frontend</strong>.",
          "<strong>Real Time</strong>  ready to deploy with web sockets.",
          "<strong>Automatic integration </strong>with view frameworks like React, Vue, Svelte.",
          "<strong>Smarter Typescript</strong>: transpiling and type checking, in parallel, for better productivity and performance.",
          "<strong>HMR</strong>  modular and in the backend code automatically.",
          "<strong>No dependency tree</strong>  BeyondJS works under a different paradigm than the one used by bundle modules like webpack.",
          "<strong>Jamstack + SSR.</strong>",
          "Standardized integration with NPM, ready to publish.",
          "<strong>Execution environment</strong> for services managed by <span class=\"beyond\">BeyondJS.</span>",
          "Web Components integrados.",
          "<strong>Multilanguage</strong> managed through bundles.",
          "Management of templates and overwriting."
        ]
      }
    }
  }
}
