{
  "en": {
    "universal": {
      "h1#intro": [
        "Universal Typescript",
        "What is BeyondJS?"
      ],
      "cc1": "about",
      "p1": "BeyondJS is a new generation meta-framework based on Typescript, designed to create universal code and focused on the modular development of projects compatible with different Javascript runtime environments. \n",
      "p2": "The BeyondJS architecture allows you to work efficiently in large or small projects without affecting productivity as the project grows. Moreover, it guarantees the developer a homogeneous development experience.\n",
      "h2#why": "Why Modular+Universal?",
      "p3": "Deno, NodeJS, and modern browsers like Chrome or Edge are all based on the same Javascript technology. ",
      "p4": {
        "s1": "<strong>Same engine, but not the same coding techniques.</strong>"
      },
      "p5": "Bundle consumption in NodeJS is based on NPM and the node_modules folder, Deno directly consumes the dependencies as HTTP imports.\n",
      "p6": "Modern browsers have the ability to consume modules (ES, SJS, or AMD), but if you are coding for the web, unlike when coding for NodeJS or Deno, you will probably be using a bundler such as webpack, parcel, rollup, esbuild, etc.",
      "p7": "Bundlers consume the bundles published in NPM to generate a final .js file, called a 'bundle' that includes dependencies such as react or Vue.\n",
      "p8": "You can also use bundlers to program in Deno or NodeJS, something that is becoming popular due to Isomorphism or used by frameworks such as Nest or NextJS",
      "p9": "BeyondJS implements a modular design that adheres to the same rules for any platform. Projects are composed of small code units called bundles which are bundled separately and made available through a DevServer in a development environment and as compiled files in a production environment."
    }
  }
}
