{
  "en": {
    "features": {
      "h2#modular": "Modular Design",
      "p1": "The modular architecture is everything in BeyondJS. It allows the programmer to develop decoupled projects by dividing them into smaller parts that receive minimal configuration and are not affected by the growth of the project.\n",
      "p2": "The module structure is defined by `module.json` configuration files, with a structure like the following:\n",
      "c1": "modulejson",
      "p3": "The `module.json` allows the developer to define the bundles, files, and file types included.",
      "q1": {
        "s1": "You can learn more about module handling in BeyondJS in ",
        "l1": [
          "/docs/modules/introduction",
          "the Modules chapter."
        ]
      },
      "h2#dev-server": "Dev Server",
      "p4": "BeyondJS provides the development server to make bundles available on demand. The browser can make requests in the usual way, and Deno supports HTTP imports, so it works the same way since the node does not support HTTP imports. BeyondJS provides a BEE that serves as a proxy to interface with the development server so that everyone keeps the same programming logic.",
      "q2": {
        "s1": "You can learn more about the behavior of the development environment in ",
        "l1": [
          "/docs/dev-server",
          "the DevServer chapter\n"
        ],
        "s2": "."
      },
      "i1": [
        "/images/graphs/beyond-js-flow.png",
        "Beyond dev server flow"
      ],
      "h2#on-demand": "On-demand loading",
      "p7": "Thanks to the modular design, which segments projects into small pieces or modules, they are only loaded when required, allowing fast and efficient loading of projects.",
      "p8": "The modular behavior works equally well in development and production environments.",
      "p9": "It is desirable to use one distribution optimized for development and another one for production in both cases, BeyondJS will work by building the bundles, but it will generate them based on the \nconfiguration of each distribution.\n",
      "h2#distributions": "Distributions",
      "p10": "Due to some incompatibilities still existing in the JavaScript execution environments, BeyondJS allows the developer to make his code available for different platforms through distributions.",
      "h2#hmr": "HMR",
      "p11": "Hot Module Replacement is an essential feature in today's development, commonly used in frontEnd tools. BeyondJS has it enabled by default in the DevServer and without additional configuration. It also provides a basic API to the developer that allows you to define when and what you want to update.",
      "q3": {
        "s1": "You can learn more about this in the ",
        "l1": [
          "/docs/foundations/hmr",
          " HMR chapter"
        ],
        "s2": "."
      }
    }
  }
}
