{
  "en": {
    "intro": {
      "h1": [
        "Projects",
        "Introduction"
      ],
      "p1": "BeyondJS, offers an architecture focused on providing an efficient way to implement solutions, based on microservices interconnected with other microservices in the backend and with applications with micro-frontend structures if we talk about the client, without neglecting the possibility of creating simpler projects in fewer steps.",
      "p2": "To better explain the concept, one can think of a service that offers authentication management in applications. It is natural to believe that there may be developers who need to use the service from a web project with client code, and developers who are working on the backend and can also use the service to validate the session before certain actions.",
      "p3": "From the perspective of BeyondJS, the Auth service could be seen as a project that contains two distributions, one to generate the client code and another to generate the backend code, both with a single source code. The code deployed from the distributions could be made available in both distributions as an NPM package and made available for use by any developer in projects made or not with BeyondJS.",
      "p4": "Likewise, if the projects consuming ´Auth´ are BeyondJS projects, they could also import into ´Auth´ via the BeyondJS module import system"
    },
    "create": {
      "h1#create": [
        "Projects",
        "Managing a project"
      ],
      "p1": {
        "s1": "projects, like all other BeyondJS elements, are configured using objects in .json files. Project configuration files are generally named ",
        "l1": [
          "/docs/projects/json",
          "project.json"
        ],
        "s2": " as a convention and allow a wide range of configurations.\n"
      },
      "p2": "Projects can be configured in two ways: through the Dashboard interface and manually."
    },
    "dashboard": {
      "h2#dashboard": "Using the Dashboard\n",
      "p1": "To create a project from the dashboard, you first need to make sure BeyondJS is running in the folder where you want to work on your projects. As explained in the introduction, BeyondJS, is developed to handle projects simultaneously, so keep in mind that the run directory may be one where you want to add \"multiple\" projects.\n",
      "p2": "Let's start BeyondJS:",
      "c1": "beyond",
      "p3": {
        "s1": "Then, we access the dashboard, which will be available at ",
        "l1": [
          "http://localhost:4000",
          "http://localhost:4000"
        ],
        "s2": "."
      },
      "p4": "The dashboard has three ways to access the project creation process:",
      "i1": [
        "/images/dashboard/empty.png",
        "beyond creating projects"
      ],
      "items1": [
        "In the Preaside, by using the icon.",
        "In the Project Board, at the top right, the option \"create project.\"",
        "When no project created, a message is displayed inviting you to create a project, as seen in the above reference image."
      ],
      "p5": "Clicking on any of the mentioned alternatives, a modal is displayed, allowing you to select the type of project to create. This function enables you to start with a blank project or using an already created template. Current choices are:\n",
      "h4": "Blank Project Types",
      "i2": [
        "/images/dashboard/new-project.png",
        "BeyondJS - Project types"
      ],
      "items2": [
        "Web: Ready to start a web project that can be distributed on the internet or as a mobile application.",
        "Node: Ready to distribute as a project to run in a node environment.",
        "Backend: Node project that makes available interfaces that could be consumed in real-time with web sockets from another node project or a client project.",
        "Library: Ideal for creating projects intended to be distributed as NPM packages.,",
        "Web - backend: Generates a web project with a backend distribution."
      ],
      "h4#templates": "Template types",
      "items4": [
        "React, Vue, and Svelte apps: Projects to start working with the preferred framework library.",
        "Express: Project with an initial structure to create an express server.",
        "Web Template: Project with a client and backend structure communicated through a web socket."
      ],
      "p6": {
        "s1": "It is possible to work with different view libraries/Frameworks in the same project, thanks to the micro-frontend structure offered by BeyondJS. Read more about it in ",
        "l1": [
          "/docs/widgets",
          "the Widgets chapter"
        ],
        "s2": "."
      }
    },
    "createInfo": {
      "p1": "After seleting the project type, a form appears requesting the scope and name of the project, the port on which it will run, and additionally, an optional title and description. After filling in the necessary data, the dashboard is responsible for creating the project with the file structure, and the project is available to be accessed on the configured port.",
      "i1": [
        "/images/dashboard/create-form-project.png",
        "BeyondJS - new project form"
      ]
    },
    "manual": {
      "h2#create": "Manual creation",
      "p1": "The definition of a project is done through the project.json file.",
      "p2": "The minimum structure required to create a project is as follows:",
      "c1": "tpl1",
      "p3": "Having created the project.json file, it only left creating the BeyondJS server configuration file, which is called beyond.json and whose basic structure is as follows:",
      "c2": "tpl2",
      "p4": "The `applications` input is an array that can contain a list of paths relative to project configuration files.",
      "q2": {
        "s1": "Read more about BeyondJS configuration options in the development environment in the ",
        "l1": [
          "/docs/dev-server",
          "Development Server chapter"
        ],
        "s2": "."
      }
    }
  }
}
