{
  "es": {
    "intro": {
      "h1": [
        "Proyectos",
        "Introducción"
      ],
      "p1": "BeyondJS ofrece una arquitectura enfocada en proveer una forma eficiente de implementar soluciones basadas en microservicios interconectados con otros microservicios en el backend y con aplicativos con estructuras de micro-frontends si hablamos del cliente, esto sin dejar de lado la posibilidad de crear proyectos más sencillos en pocos pasos.",
      "p2": " Para explicar el concepto, se puede pensar en un servicio que ofrece la gestión de autenticación en aplicaciones. Es natural pensar que pueden existir desarrolladores que requieran consumir el servicio desde un proyecto web, con código cliente y desarrolladores que estén trabajando en el backend y también puedan consumir el servicio para validar la sesión previo a determinada acción.",
      "p3": " Desde la óptica de BeyondJS el servicio de Auth puede ser visto como un proyecto que contiene dos distribuciones, una para generar el código cliente y una para generar el código backend, ambas con un único código fuente. El código desplegado de las distribuciones podría disponibilizarse en las dos distribuciones como paquete NPM y quedar disponible para ser usados por cualquier programador en proyectos hechos o no con BeyondJS.",
      "p4": "Asimismo, si los proyectos que consumen ´Auth´ son proyectos BeyondJS también podrían importar a ´Auth´ por medio del sistema de importación de módulos de BeyondJS."
    },
    "create": {
      "h1#create": [
        "Proyectos",
        "Gestión de un proyecto"
      ],
      "p1": {
        "s1": "Los proyectos, al igual que el resto de elementos de BeyondJS, se configuran por medio de objetos en archivos .json. Generalmente, los archivos de configuración de proyectos llevan por nombre",
        "l1": [
          "/docs/projects/json",
          "project.json"
        ],
        "s2": " como convención y permiten una variedad amplia de configuraciones."
      },
      "p2": "Los proyectos se pueden configurar de dos formas: por medio de la interfaz del Dashboard y manualmente."
    },
    "dashboard": {
      "h2#dashboard": "Usando el Dashboard\n",
      "p1": "Para crear un proyecto desde el dashboard, en primer lugar debe asegurarse de que BeyondJS esté ejecutandose en la carpeta donde desee trabajar sus proyectos. Como se explica en la introducción, BeyondJS está hecho para manejar proyectos en simultáneo, por lo que es importante tener presente que el directorio de ejecución puede ser uno donde se deseen agregar \"varios\" proyectos.",
      "p2": "Iniciamos BeyondJS:",
      "c1": "beyond",
      "p3": {
        "s1": "Luego accedemos al dashboard el cual estará disponible en ",
        "l1": [
          "http://localhost:4000",
          "http://localhost:4000"
        ],
        "s2": "."
      },
      "p4": "El dashboard posee tres maneras de acceder al proceso de creación de proyectos",
      "i1": [
        "/images/dashboard/empty.png",
        "beyond creating projects"
      ],
      "items1": [
        "In the Preaside, by using the icon.",
        "In the Project Board, at the top right, the option \"create project.\"",
        "When no project created, a message is displayed inviting you to create a project, as seen in the above reference image."
      ],
      "p5": "Clicking on any of the mentioned alternatives, a modal is displayed, allowing you to select the type of project to create. This function enables you to start with a blank project or using an already created template. Current choices are:\n",
      "h4#blank-projects": "Tipos de Proyectos en blanco",
      "i2": [
        "/images/dashboard/new-project.png",
        "BeyondJS - Project types"
      ],
      "items2": [
        "Web: : Listo para comenzar un proyecto web que pueda ser distribuido en internet o como aplicación móvil.",
        "Node: Listo para distribuir como un proyecto a ejecutar en un entorno node.",
        "Backend: Proyecto node que disponibiliza interfaces que puedan ser consumidas en real-time con web sockets desde otro proyecto node o desde un proyecto cliente.",
        "Library: Ideal para crear proyectos que esten pensados para ser distribuidos como paquetes NPM.",
        "web - backend: Genera un proyecto con distribuciones Web y Backend integrados."
      ],
      "h4#templates": "Tipos de plantillas",
      "items4": [
        "React, vue y svelte apps, proyectos para empezar a trabajar con la libreria de framework de preferencia.",
        "Express: Proyecto con una estructura inicial para crear un servidor express.",
        "Template web: Template basica, con un modulo de ruta por defecto y la inicialización del backend implementada.\n"
      ],
      "p6": {
        "s1": "Se puede trabajar con diferentes librerias/Frameworks de vistas en un mismo proyecto gracias a la estructura de micro-frontends que ofrece BeyondJS. Puede leerse más al respecto en ",
        "l1": [
          "/docs/widgets",
          "La sección de widgets"
        ],
        "s2": "."
      }
    },
    "createInfo": {
      "p1": "Luego de la selección del tipo de proyecto, aparece un formulario que solicita el scope y nombre del proyecto, el puerto sobre el cúal correrá, y adicionalmente, un titulo y descripción opcionales. Luego de llenar los datos necesarios, el Dashboard se encarga de crear el proyecto con la estructura de archivos y el proyecto queda disponible para ser accedido en el puerto configurado.",
      "i1": [
        "/images/dashboard/create-form-project.png",
        "BeyondJS - new project form"
      ],
      "q1": "Todos los proyectos tienen dependencias de paquetes npm que pueden opcionalmente ser instalados desde el dashboard. En caso de no haberlo hecho, para que el proyecto funcione es necesario instalar las dependencias manualmente."
    },
    "manual": {
      "h2#manual": "Creación manual",
      "p1": "La definición de un proyecto se hace por medio del archivo project.json.",
      "p2": "La estructura mínima necesaria para la creación de un proyecto es la siguiente:",
      "c1": "tpl1",
      "p3": "Habiendo creado el archivo `project.json`, solo resta crear el archivo de configuración del servidor de `BeyondJS`, que lleva por nombre `beyond.json` y cuya estructura básica es la siguiente:",
      "c2": "tpl2",
      "p4": "La entrada `applications` es un arreglo que puede contener una lista de rutas relativas a archivos de configuración de proyectos.",
      "q2": {
        "s1": "Puedes leer más sobre las opciones de configuración de BeyondJS en entorno de desarrollo en la sección del ",
        "l1": [
          "/docs/dev-server",
          "Servidor de desarrollo"
        ],
        "s2": "."
      }
    }
  }
}
